{
    "fitness": -753.7641448974609,
    "window_fn": null,
    "detector_fn": "clipped_detector_fn",
    "window_shape": [
        5,
        5
    ],
    "sympy": "[Max(x_18, x_6), Min(x_18, floor(Min(x_13, x_14)/2 + Min(x_17, x_22)/2))]",
    "genome": "Genome(0: [-1, -3, -3] | 1: [-1, -3, -3] | 2: [-1, -3, -3] | 3: [-1, -3, -3] | 4: [-1, -3, -3] | 5: [-1, -3, -3] | 6: [-1, -3, -3] | 7: [-1, -3, -3] | 8: [-1, -3, -3] | 9: [-1, -3, -3] | 10: [-1, -3, -3] | 11: [-1, -3, -3] | 12: [-1, -3, -3] | 13: [-1, -3, -3] | 14: [-1, -3, -3] | 15: [-1, -3, -3] | 16: [-1, -3, -3] | 17: [-1, -3, -3] | 18: [-1, -3, -3] | 19: [-1, -3, -3] | 20: [-1, -3, -3] | 21: [-1, -3, -3] | 22: [-1, -3, -3] | 23: [-1, -3, -3] | 24: [-1, -3, -3] | 25: [6, 22, 17] | 26: [12, 12, 15] | 27: [13, 5, 22] | 28: [7, 20, 20] | 29: [2, 3, 0] | 30: [1, 11, 18] | 31: [13, 7, 4] | 32: [2, 16, 24] | 33: [0, 19, 21] | 34: [5, 13, 13] | 35: [6, 23, 21] | 36: [9, 17, 5] | 37: [7, 1, 17] | 38: [1, 24, 5] | 39: [13, 7, 16] | 40: [0, 7, 8] | 41: [10, 36, 34] | 42: [9, 25, 25] | 43: [0, 24, 7] | 44: [3, 23, 9] | 45: [0, 21, 32] | 46: [10, 0, 38] | 47: [13, 37, 33] | 48: [6, 14, 34] | 49: [7, 4, 33] | 50: [4, 13, 20] | 51: [1, 25, 9] | 52: [9, 25, 12] | 53: [12, 30, 19] | 54: [2, 38, 25] | 55: [11, 25, 54] | 56: [9, 25, 48] | 57: [1, 45, 43] | 58: [2, 5, 50] | 59: [12, 48, 8] | 60: [2, 36, 33] | 61: [7, 28, 33] | 62: [12, 0, 51] | 63: [13, 32, 6] | 64: [10, 4, 54] | 65: [0, 39, 8] | 66: [8, 25, 13] | 67: [5, 12, 45] | 68: [10, 13, 32] | 69: [7, 29, 48] | 70: [11, 20, 10] | 71: [1, 65, 15] | 72: [6, 20, 22] | 73: [3, 5, 3] | 74: [0, 62, 5] | 75: [11, 55, 69] | 76: [11, 66, 50] | 77: [11, 18, 10] | 78: [5, 44, 49] | 79: [1, 41, 62] | 80: [7, 11, 58] | 81: [0, 9, 1] | 82: [5, 21, 60] | 83: [13, 49, 61] | 84: [3, 52, 13] | 85: [9, 13, 63] | 86: [2, 7, 19] | 87: [4, 73, 77] | 88: [8, 20, 55] | 89: [1, 14, 61] | 90: [5, 66, 3] | 91: [7, 9, 22] | 92: [5, 21, 57] | 93: [6, 9, 13] | 94: [4, 65, 56] | 95: [7, 56, 63] | 96: [1, 24, 65] | 97: [8, 67, 70] | 98: [0, 23, 63] | 99: [5, 56, 76] | 100: [10, 73, 96] | 101: [9, 16, 14] | 102: [2, 77, 85] | 103: [11, 20, 76] | 104: [13, 73, 5] | 105: [10, 85, 87] | 106: [3, 16, 6] | 107: [12, 73, 94] | 108: [10, 73, 5] | 109: [4, 84, 83] | 110: [11, 98, 80] | 111: [0, 99, 16] | 112: [12, 77, 21] | 113: [2, 19, 21] | 114: [10, 72, 76] | 115: [12, 8, 14] | 116: [8, 107, 11] | 117: [4, 22, 113] | 118: [3, 91, 5] | 119: [6, 18, 95] | 120: [7, 102, 13] | 121: [0, 86, 12] | 122: [12, 111, 11] | 123: [13, 90, 18] | 124: [8, 85, 6] | 125: [13, 91, 0] | 126: [5, 1, 20] | 127: [2, 88, 107] | 128: [2, 8, 113] | 129: [3, 102, 8] | 130: [4, 6, 18] | 131: [12, 9, 6] | 132: [1, 124, 4] | 133: [12, 10, 123] | 134: [12, 123, 118] | 135: [9, 114, 6] | 136: [2, 11, 111] | 137: [3, 129, 104] | 138: [11, 15, 17] | 139: [9, 23, 114] | 140: [12, 19, 9] | 141: [9, 18, 111] | 142: [8, 120, 21] | 143: [9, 116, 16] | 144: [4, 123, 114] | 145: [-2, 130, -3] | 146: [-2, 119, -3])",
    "active_nodes": "CartesianGraph([InputNode(idx: 6, active: True, arity: 0, addresses of inputs [], InputNode(idx: 13, active: True, arity: 0, addresses of inputs [], InputNode(idx: 14, active: True, arity: 0, addresses of inputs [], InputNode(idx: 17, active: True, arity: 0, addresses of inputs [], InputNode(idx: 18, active: True, arity: 0, addresses of inputs [], InputNode(idx: 22, active: True, arity: 0, addresses of inputs [], Min(idx: 25, active: True, arity: 2, addresses of inputs [22, 17], ConditionalAssignment(idx: 34, active: True, arity: 2, addresses of inputs [13, 13], Min(idx: 48, active: True, arity: 2, addresses of inputs [14, 34], Add(idx: 56, active: True, arity: 2, addresses of inputs [25, 48], Div2(idx: 95, active: True, arity: 1, addresses of inputs [56], Min(idx: 119, active: True, arity: 2, addresses of inputs [18, 95], Max(idx: 130, active: True, arity: 2, addresses of inputs [6, 18], OutputNode(idx: 145, active: True, arity: 1, addresses of inputs [130], OutputNode(idx: 146, active: True, arity: 1, addresses of inputs [119]])"
}